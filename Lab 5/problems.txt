/*
domains

list=integer*

predicates
nondeterm exist(integer,list).

clauses
exist(X,[X|_]).
exist(X,[_|Y]):-exist(X,Y).


goal

exist(6,[1,2,3,4]).
*/










domains

list=integer*

predicates
nondeterm exist(integer,list).

clauses
exist(X,[X|_]).
exist(X,[_|Y]):-exist(X,Y).


goal

exist(6,[1,2,3,4]).

%non tailed version (recursive)
/*domains

list=integer*


predicates

nondeterm len(list,integer).

clauses


len([],0).
len([_|T],L):-len(T,Nl),L=Nl+1.


goal
len([1,2,3,1,3],R).
*/
%tailed iterative
/*
domains

list=integer*

predicates

len(list,integer)
len_aux(list,integer,integer)

clauses

len(L,Count):-len_aux(L,Count,0).

len_aux([],R,R):-!.

len_aux([_|T],R,Acc):-Nacc=Acc+1,len_aux(T,R,Nacc)        .

goal

len([1,3,4,6,8],R).
*/

%non tailed sum

/*
domains
list=integer*

predicates

nondeterm sum(list,integer)


clauses

sum([],0):-!.

sum([H|T],R):-sum(T,Nr),R=H+Nr.


goal

sum([5,4,3],Y).
*/

/*
domains

list=integer*

predicates

sum(list,integer).
sum_aux(list,integer,integer).

clauses

sum(L,R):-sum_aux(L,R,0).

sum_aux([],R,R).

sum_aux([H|T],R,Acc):-Nacc=Acc+H,sum_aux(T,R,Nacc).

goal
sum([1,2,3],R).

*/
/*
domains
list=integer*

predicates

avg(list,real).

clauses

avg([],0).

avg([H|T],Avg):-avg(T,Na),

goal
*/
/*
domains
list=integer*

predicates

avg(list,real).
avg_aux(list,real,integer,real).

clauses
avg(L,A):-avg_aux(L,0,0,A).

avg_aux([],S,C,A):-A=S/C.

avg_aux([H|T],S,C,A):-Nc=C+1,Ns=S+H,avg_aux(T,Ns,Nc,A).

goal

avg([5,4],T).

*/
/*
domains
list=integer*

predicates
nondeterm insert(list,integer,list).

clauses

insert(L,H,[H|L]).

goal

insert([5,4,3],7,L).
*/
/*
domains
list=integer*

predicates

nondeterm insert_end(list,integer,list).
clauses
insert_end([],X,[X]).
insert_end([H|T],X,L):-insert_end(T,X,T1),L=[H|T1].

goal
insert_end([5,4],3,L).
*/
%find last element
/*
domains

list=integer*

predicates

nondeterm insert_last(list,integer,list).


clauses

insert_last([],E,[E]).

insert_last([H|T],E,L):-insert_last(T,E,T1),L=[H|T1].

goal

insert_last([5,4,3],7,L).
*/
/*
domains

list=integer*


predicates

find_last(list,integer).

clauses
find_last([T],T):-!.

find_last([H|T],R):-find_last(T,R).


goal
find_last([5,4,3],R).
*/






/*

domains
list=integer*

predicates

nondeterm max(list,integer).

nondeterm get_max(list,integer,integer)

clauses

max([H|T],M):-get_max(T,M,H).

get_max([],M,M).
get_max([H|T],M,Temp):-Temp>H,get_max(T,M,Temp).
get_max([H|T],M,Temp):-Temp<H,get_max(T,M,H).

goal
max([7,10,132],M).
*/
domains

list=integer*
/*
predicates


nondeterm divide(list,list,list)

clauses

divide([],[],[]).

divide([H|T],[H|T1],N):-H>=0,!,divide(T,T1,N).

divide([H|T],P,[H|T1]):-H<0,!,divide(T,P,T1).

goal

divide([-1,-2,5,4,-3,7],P,N).
*/

